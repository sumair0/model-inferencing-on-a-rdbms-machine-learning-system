
#ifndef LAMBDA_CREATION_H
#define LAMBDA_CREATION_H

#include "Lambda.h"
#include "Ptr.h"
#include "AttAccessLambda.h"
#include "MethodCallLambda.h"
#include "EqualsLambda.h"
#include "SimpleComputeExecutor.h"
#include "TypeName.h"

namespace pdb {

template <typename LeftType, typename RightType> 
LambdaTree <bool> operator == (LambdaTree <LeftType> lhs, LambdaTree <RightType> rhs) {
	return LambdaTree <bool> (std :: make_shared <EqualsLambda <LeftType, RightType>> (lhs, rhs));
}

template <typename ReturnType, typename ClassType>
LambdaTree <Ptr<ReturnType>> makeLambdaUsingMember (std :: string inputTypeName, std :: string attName, std :: string attType,
	Handle <ClassType> &var, ReturnType &member, size_t offset) {
	return LambdaTree <Ptr<ReturnType>> (std :: make_shared <AttAccessLambda <ReturnType, ClassType>> 
		(inputTypeName, attName, attType, var, offset));
}

// we have this here only so that we can cast it to be of type VAR
void *someRandomPointer;

#define makeLambdaFromMember(VAR,MEMBER) (makeLambdaUsingMember (getTypeName <std::remove_reference<decltype(*VAR)>::type> (), std :: string (#MEMBER), \
	getTypeName <typename std::remove_reference<decltype(VAR->MEMBER)>::type> (), VAR, VAR->MEMBER, \
		((char *) &(((std::remove_reference<decltype(*VAR)>::type *) someRandomPointer)->MEMBER)) - (char *) someRandomPointer))

// this bit of nasty templating defines a function that creates a LambdaBase object encapsulating a method call on an underlying object.  This
// particular template accepts only methods that return references, because such a method's output is converted into a pointer (for speed)
// rather than actually copying the method's output
template <typename ReturnType, typename ClassType>
LambdaTree <std :: enable_if_t <std :: is_reference <ReturnType>::value, Ptr <typename std :: remove_reference <ReturnType> :: type>>> makeLambdaUsingMethod (
	std :: string inputTypeName, std :: string methodName, Handle <ClassType> &var, std :: string returnTypeName, ReturnType (ClassType:: *arg) (),
	std::function <bool (std :: string &, TupleSetPtr, int)> columnBuilder,
	std::function <SimpleComputeExecutorPtr (TupleSpec &, TupleSpec &, TupleSpec &)> getExecutor) {
	return LambdaTree <Ptr <typename std :: remove_reference <ReturnType> :: type>> 
		(std :: make_shared <MethodCallLambda <Ptr <typename std :: remove_reference <ReturnType> :: type>, ClassType>>
		(inputTypeName, methodName, returnTypeName, var, columnBuilder, getExecutor));
}

template <typename ReturnType, typename ClassType>
LambdaTree <std :: enable_if_t <!(std :: is_reference <ReturnType>::value), ReturnType>> makeLambdaUsingMethod (
	std :: string inputTypeName, std :: string methodName, Handle <ClassType> &var, std :: string returnTypeName, ReturnType (ClassType:: *arg) (),
	std::function <bool (std :: string &, TupleSetPtr, int)> columnBuilder,
	std::function <SimpleComputeExecutorPtr (TupleSpec &, TupleSpec &, TupleSpec &)> getExecutor) {
	return LambdaTree <ReturnType> (std :: make_shared <MethodCallLambda <ReturnType, ClassType>>
		(inputTypeName, methodName, returnTypeName, var, columnBuilder, getExecutor));
}

// called if ReturnType is a reference
template <bool B, typename InputType>
auto tryReference (InputType &arg) -> 
	typename std :: enable_if_t <B, InputType *> {
	return &arg;
}

// called if ReturnType is a reference
template <bool B, typename InputType>
auto tryReference (InputType arg) -> 
	typename std :: enable_if_t <!B, InputType *> {
	InputType *temp = nullptr;
	return temp;	
}

#define makeLambdaFromMethod(VAR,METHOD) (makeLambdaUsingMethod (getTypeName <typename std::remove_reference<decltype(*VAR)>::type> (), 		\
	std :: string (#METHOD), VAR, 															\
	getTypeName <typename std::remove_reference<decltype(*VAR)>::type> (), 										\
	&std::remove_reference<decltype(*VAR)>::type::METHOD,												\
	[] (std :: string &pleaseCreateThisType, TupleSetPtr input, int outAtt) {									\
		if (pleaseCreateThisType == getTypeName <typename std::remove_reference<decltype (VAR->METHOD ())>::type> ()) {				\
			std :: vector <typename std::remove_reference<decltype (VAR->METHOD ())>::type> *outColumn = 					\
				new std :: vector <typename std::remove_reference<decltype (VAR->METHOD ())>::type>;					\
			input->addColumn (outAtt, outColumn, true);											\
			return true;															\
		}																	\
																			\
		if (pleaseCreateThisType == getTypeName <Ptr <typename std::remove_reference<decltype (VAR->METHOD ())>::type>> ()) {			\
			std :: vector <Ptr <typename std::remove_reference<decltype (VAR->METHOD ())>::type>> *outColumn = 				\
				new std :: vector <Ptr <typename std::remove_reference<decltype (VAR->METHOD ())>::type>>;				\
			input->addColumn (outAtt, outColumn, true);											\
			return true;															\
		}																	\
																			\
		return false;																\
	},																		\
	[] (TupleSpec &inputSchema, TupleSpec &attsToOperateOn, TupleSpec &attsToIncludeInOutput) {							\
																			\
		/* create the output tuple set */													\
		TupleSetPtr output = std :: make_shared <TupleSet> ();											\
																			\
		/* create the machine that is going to setup the output tuple set, using the input tuple set */						\
		TupleSetSetupMachinePtr <typename std::remove_reference<decltype (VAR->METHOD ())>::type> myMachineNoPtr = 				\
			std :: make_shared <TupleSetSetupMachine <typename std::remove_reference<decltype (VAR->METHOD ())>::type>> 			\
				 (inputSchema, attsToIncludeInOutput);											\
		TupleSetSetupMachinePtr <Ptr<typename std::remove_reference<decltype (VAR->METHOD ())>::type>> myMachine = 				\
			std :: make_shared <TupleSetSetupMachine <Ptr<typename std::remove_reference<decltype (VAR->METHOD ())>::type>>>		\
				 (inputSchema, attsToIncludeInOutput);											\
																			\
		/* this is the input attribute that we will process */											\
		std :: vector <int> matches = myMachineNoPtr->match (attsToOperateOn);									\
		myMachine->match (attsToOperateOn);													\
		int whichAtt = matches[0];														\
																			\
		/* this is the output attribute */													\
		int outAtt = attsToIncludeInOutput.getAtts ().size ();											\
																			\
		return std :: make_shared <SimpleComputeExecutor> (											\
			output,																\
			[=] (TupleSetPtr input) {													\
																			\
				/* if the method returns a reference, then we transform the method output into a pointer */				\
				if (std::is_reference<decltype (VAR->METHOD ())>::value) {								\
																			\
					/* set up the output tuple set */										\
					myMachine->setup (input, output);										\
																			\
					/* get the column to operate on... the input type is taken from the argument VAR */				\
					std :: vector <typename std::remove_reference<decltype(VAR)>::type> &inputColumn =				\
						input->getColumn <typename std::remove_reference<decltype(VAR)>::type> (whichAtt);			\
																			\
					/* setup the output column, if it is not already set up */							\
					if (!output->hasColumn (outAtt)) {										\
						std :: vector <Ptr <typename std::remove_reference<decltype (VAR->METHOD ())>::type>> *outColumn = 	\
							new std :: vector <Ptr <typename std::remove_reference<decltype (VAR->METHOD ())>::type>>;	\
						output->addColumn (outAtt, outColumn, true);								\
					}														\
																			\
					/* get the output column */											\
					std :: vector <Ptr <typename std::remove_reference<decltype (VAR->METHOD ())>::type>> &outColumn = 		\
						output->getColumn <Ptr <typename std::remove_reference<decltype (VAR->METHOD ())>::type>> (outAtt);	\
																			\
					/* loop down the column, setting the output */									\
					int numTuples = inputColumn.size ();										\
					outColumn.resize (numTuples);											\
					for (int i = 0; i < numTuples; i++) {										\
						outColumn [i] = tryReference <std::is_reference<decltype (VAR->METHOD ())>::value> (inputColumn[i]->METHOD ());	\
					}														\
					return output;													\
																			\
				/* if the method does not return a reference, then we just go ahead and store a copy of what was returned */		\
				} else {														\
																			\
					/* set up the output tuple set */										\
					myMachineNoPtr->setup (input, output);										\
																			\
					/* get the column to operate on... the input type is taken from the argument VAR */				\
					std :: vector <typename std::remove_reference<decltype(VAR)>::type> &inputColumn =				\
						input->getColumn <typename std::remove_reference<decltype(VAR)>::type> (whichAtt);			\
																			\
					/* setup the output column, if it is not already set up	*/							\
					if (!output->hasColumn (outAtt)) {										\
						std :: vector <typename std::remove_reference<decltype (VAR->METHOD ())>::type> *outColumn = 		\
							new std :: vector <typename std::remove_reference<decltype (VAR->METHOD ())>::type>;		\
						output->addColumn (outAtt, outColumn, true);								\
					}														\
																			\
					/* get the output column */											\
					std :: vector <typename std::remove_reference<decltype (VAR->METHOD ())>::type> &outColumn = 			\
						output->getColumn <typename std::remove_reference<decltype (VAR->METHOD ())>::type> (outAtt);		\
																			\
					/* loop down the column, setting the output */									\
					int numTuples = inputColumn.size ();										\
					outColumn.resize (numTuples);											\
					for (int i = 0; i < numTuples; i++) {										\
						outColumn [i] = inputColumn[i]->METHOD ();								\
					}														\
					return output;													\
				} 															\
			}																\
		);																	\
	}))	

}
#endif
